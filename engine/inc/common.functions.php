<?phpfunction msg($msg, $error = false){	if($error == false){		$x = 		'<div class="alert alert-success">		  <a class="close" data-dismiss="alert">×</a>		  '.$msg.'		</div>';	}	else 		$x = 		'<div class="alert alert-error">		  <a class="close" data-dismiss="alert">×</a>		  <h4 class="alert-heading">Error!</h4>		  '.$msg.'		</div>';			return $x;}function redirect($id = null, $type = 1, $url = ''){	if($id == null) {		header('Location: '.$url);        exit();	}		if($type == 1)		$type2 = 'success_';	else		$type2 = 'error_';			$message = langStrExists('msg', $type2.$id);		if(empty($url))		$url = $_SERVER['HTTP_REFERER'];		// success	if($type == 1)		$_SESSION['message']['m'] = $message;		// error	else		$_SESSION['error']['e'] = $message;			header('Location: '.$url);	exit();}// securefunction s($string){	return stripslashes(stripslashes(htmlspecialchars($string)));}// $_GETfunction G($str, $index = NULL){	if(!isset($index)):		if(isset($_GET[$str])):			return s($_GET[$str]);				else:			return NULL;		endif;		else:		if(isset($_GET[$str]) AND is_array($_GET[$str]) AND isset($_GET[$str][$index])):			return s($_GET[$str][$index]);					else:			return NULL;		endif;	endif;	}// $_POSTfunction P($str, $index = NULL){	if(!isset($index)):		if(isset($_POST[$str])):			return s($_POST[$str]);					else:			return NULL;		endif;	else:		if(isset($_POST[$str]) AND is_array($_POST[$str]) AND isset($_POST[$str][$index])):			return s($_POST[$str][$index]);					else:			return NULL;		endif;	endif;	}function loadIniFile($file){	if(is_file($file))	{		$ini = parse_ini_file($file);		return $ini;	}			else return false;}function langStrExists($module, $str){	global ${'L_'.$module};		if(@array_key_exists( $str, ${'L_'.$module}))		return ${'L_'.$module}[$str];}function l(){	global $Bld;		$module = $Bld['site']['module'];	$module2 = $Bld['site']['arg1'];		$numArgs = func_num_args();	$arg = func_get_arg(0);	$str = langStrExists($module, $arg);	if(empty($str)):		$str = langStrExists($module2, $arg);		if(empty($str)):			$str = langStrExists('global', $arg);			if(empty($str)):					return '{'.$arg.'}';			endif;		endif;	endif;		if($numArgs > 1):		for($i = 1; $i < $numArgs; $i++):			$ar = func_get_arg($i);			$str = str_replace('$'.$i, $ar, $str);		endfor;	endif;		return $str;	}function nb_format($nb){	global $Bld;		switch($Bld['lang']):		default:		case 'fr':			return number_format($nb, 0, ',', ' ');			break;					case 'en':			return number_format($nb, 0);			break;					case 'es':			return number_format($nb, 0);			break;	endswitch;}function rewrite($nom){	$nom = strtolower($nom);		//Suppression des tags	$nom = preg_replace('`\{.+\}`U', '', $nom);	$nom = preg_replace('`\[.+\]`U', '', $nom);		//Remplacement des caractères non acceptés	$nom = str_replace(array('ä', 'à', 'â'), 'a', $nom);	$nom = str_replace(array('é', 'è', 'ê', 'ë'), 'e', $nom);	$nom = str_replace(array('î', 'ï'), 'i', $nom);	$nom = str_replace(array( 'ô', 'ô', 'ö', 'õ'), 'o', $nom);	$nom = str_replace(array('ù', 'û', 'ü'), 'u', $nom);	$nom = str_replace(array('ñ'), 'n', $nom);	$nom = str_replace(array('ç'), 'c', $nom);	$nom = preg_replace('`[^a-z0-9]+`', '-', $nom);	$nom = preg_replace('`-{2,}`', '-', $nom);	$nom = trim($nom, '-');		return empty($nom) ? 'lien' : $nom ;}function getIp($long = false){	static $realip;	if(!isset($realip))	{		if (!empty($_SERVER["HTTP_CLIENT_IP"]) && validip($_SERVER["HTTP_CLIENT_IP"]))			$realip = $_SERVER["HTTP_CLIENT_IP"];					else if (!empty($_SERVER["HTTP_X_FORWARDED_FOR"]))		{			if(isset($_SERVER["HTTP_X_FORWARDED_FOR"]))			{				foreach (explode(",",$_SERVER["HTTP_X_FORWARDED_FOR"]) as $ip)				{					if (validip(trim($ip)))					{						$realip = $ip;						break;					}				}			}		}		if (empty($realip))		{			if (!empty($_SERVER["HTTP_X_FORWARDED"]) && validip($_SERVER["HTTP_X_FORWARDED"]))							$realip = $_SERVER["HTTP_X_FORWARDED"];							elseif (!empty($_SERVER["HTTP_FORWARDED_FOR"]) && validip($_SERVER["HTTP_FORWARDED_FOR"]))				$realip = $_SERVER["HTTP_FORWARDED_FOR"];							elseif (!empty($_SERVER["HTTP_FORWARDED"]) && validip($_SERVER["HTTP_FORWARDED"]))				$realip = $_SERVER["HTTP_FORWARDED"];							else				$realip = $_SERVER["REMOTE_ADDR"];		}	}	if($long == true)		return ip2long($realip);			return $realip;}function validip($ip) {	$ip = ip2long($ip);	if ($ip != -1) 	{		$reserved_ips = array (			array(0, 50331647), // 0.0.0.0 ==> 2.255.255.255			array(167772160, 184549375), // 10.0.0.0 ==> 10.255.255.255			array(2130706432, 2147483647), // 127.0.0.0 ==> 127.255.255.255			array(-1442971648, -1442906113), //169.254.0.0 ==> 169.254.255.255			array(-1408237568, -1407188993), // 172.16.0.0 ==> 172.31.255.255			array(-1073741312, -1073741057), // 192.0.2.0 ==> 192.0.2.255			array(-1062731776, -1062666241), // 192.168.0.0 ==> 192.168.255.255			array(-256, -1) // 255.255.255.0 ==> 255.255.255.255		);		foreach ($reserved_ips as $r) {			if (($ip >= $r[0]) && ($ip <= $r[1])) return false;		}		return true;	}	return false;}function dateformat($dateheure, $datetime = 1){	if($dateheure == 0)		return 'Never';			$final = '';	$dateheurefausse = mktime(1, 0, 0, date('m', $dateheure), date('d', $dateheure), date('Y', $dateheure));	$fauxnow = mktime(1, 0, 0, date('m'), date('d'), date('Y'));	$faussedifference = $fauxnow - $dateheurefausse;	$now = time();	$difference = $now - $dateheure;	$futur = false;	if($difference < 0)	{		$difference = abs($difference);		$faussedifference = abs($faussedifference);		$futur = true;	}	if($faussedifference > 24*60*60) 	{		if($datetime == 1)		{			return date('d/m/Y at H\hi:s', $dateheure);		}		elseif($datetime == 0)		{			return date('d/m/Y', $dateheure);		}	}	elseif($faussedifference == 0) 	{		if($datetime == 1)		{			if($difference >= 4*60*60) 			{				$final = 'Today';			}			elseif($difference < 4*60*60) 			{				$heure = (int)($difference/(60*60));				$difference -= $heure*60*60;				$minute = (int)($difference/60);				$difference -= $minute*60;				$seconde = $difference;				if($heure > 0)				{					if($minute < 10)					{						$minute = '0'.$minute;					}					$final .= $heure.'h'.$minute;				}				elseif($minute > 0)				{					$final .= $minute.'m';				}				else				{					$final .= $seconde.'s';				}								$final .= " ago";				return $final;			}		}		elseif($datetime == 0)		{			return 'Today';		}	}	elseif($faussedifference == 24*60*60 || $faussedifference == 24*60*60 + 3600 || $faussedifference == 24*60*60 - 3600) 	{		if($futur)		{			$final = 'Tomorrow';		}		else		{			$final = 'Yesterday';		}	}	if($datetime == 1)	{				$final .= ' at '.date('H\hi:s', $dateheure);	}	else	{		$final = substr($final, 0, strlen($final) - 1);	}	return $final;}